// ARQUIVO DE TESTE - APENAS PARA DESENVOLVEDOR
// Execute no console do navegador para testar o sistema A/B
// NUNCA expor isso para usu√°rios finais!

console.log('üß™ INICIANDO TESTE DO SISTEMA A/B');

// Simular m√∫ltiplos usu√°rios testando o sistema
function simularUsuarios(quantidade = 10) {
  console.log(`\nüìä Simulando ${quantidade} usu√°rios...`);
  
  const resultados = [];
  
  for (let i = 0; i < quantidade; i++) {
    // Limpar session para simular novo usu√°rio
    if (typeof sessionStorage !== 'undefined') {
      sessionStorage.removeItem('_abt_session');
      sessionStorage.removeItem('_abt_session_assigned');
    }
    
    // Obter variante para o "usu√°rio"
    const checkout = abTestService.getCheckoutUrl();
    resultados.push(checkout);
    
    console.log(`Usu√°rio ${i + 1}: ${checkout.variantId} -> ${checkout.checkoutUrl}`);
  }
  
  // Estat√≠sticas da simula√ß√£o
  const stats = resultados.reduce((acc, result) => {
    acc[result.variantId] = (acc[result.variantId] || 0) + 1;
    return acc;
  }, {});
  
  console.log('\nüìà Distribui√ß√£o simulada:');
  Object.entries(stats).forEach(([variant, count]) => {
    const percentage = ((count / quantidade) * 100).toFixed(1);
    console.log(`${variant}: ${count} usu√°rios (${percentage}%)`);
  });
  
  return stats;
}

// Simular funil completo
function simularFunilCompleto() {
  console.log('\nüéØ Simulando funil completo...');
  
  // 1. Usu√°rio chega na p√°gina
  const checkout = abTestService.getCheckoutUrl();
  console.log(`1. Usu√°rio atribu√≠do √† variante: ${checkout.variantId}`);
  
  // 2. Usu√°rio clica no checkout
  abTestService.trackCheckoutInitiated();
  console.log(`2. Checkout iniciado para variante: ${checkout.variantId}`);
  
  // 3. Simular convers√£o (50% chance)
  if (Math.random() > 0.5) {
    abTestService.trackCheckoutCompleted();
    console.log(`3. ‚úÖ Checkout completado para variante: ${checkout.variantId}`);
  } else {
    console.log(`3. ‚ùå Checkout abandonado para variante: ${checkout.variantId}`);
  }
  
  return checkout;
}

// Mostrar estado atual do sistema
function mostrarEstadoAtual() {
  console.log('\nüìã ESTADO ATUAL DO SISTEMA');
  console.log('================================');
  
  // Verificar se est√° habilitado
  const checkout = abTestService.getCheckoutUrl();
  console.log(`Sistema A/B ativo: ${checkout.isTest ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
  console.log(`Variante atual: ${checkout.variantId}`);
  console.log(`URL atual: ${checkout.checkoutUrl}`);
  
  // Informa√ß√µes da variante
  const variantInfo = abTestService.getVariantInfo();
  if (variantInfo) {
    console.log(`Nome da variante: ${variantInfo.variantName}`);
  }
  
  // Mostrar configura√ß√£o completa
  console.log('\n‚öôÔ∏è Configura√ß√£o de Variantes:');
  abTestConfig.variants.forEach(variant => {
    console.log(`${variant.id}: ${variant.weight}% (${variant.active ? 'Ativa' : 'Inativa'}) -> ${variant.url}`);
  });
  
  // Estat√≠sticas se houver
  try {
    const stats = getABTestStats();
    if (stats.length > 0) {
      console.log('\nüìä Estat√≠sticas:');
      stats.forEach(stat => {
        console.log(`${stat.variantId}: ${stat.assignments} atribui√ß√µes, ${stat.conversionRate.toFixed(2)}% convers√£o`);
      });
    }
  } catch (e) {
    console.log('Nenhuma estat√≠stica dispon√≠vel ainda');
  }
}

// Comandos dispon√≠veis
console.log('\nüõ† COMANDOS DISPON√çVEIS:');
console.log('simularUsuarios(10) - Simula 10 usu√°rios');
console.log('simularFunilCompleto() - Simula um funil completo');
console.log('mostrarEstadoAtual() - Mostra estado do sistema');
console.log('abTestService.forceNewVariant() - For√ßa nova variante');
console.log('getABTestReport() - Relat√≥rio completo');
console.log('abTestConfig.variants - Ver configura√ß√£o de variantes');
console.log('validateABTestConfig() - Validar configura√ß√£o atual');

// Mostrar estado inicial
mostrarEstadoAtual(); 